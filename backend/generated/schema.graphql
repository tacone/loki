"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a set of `Download`."""
  downloads(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Download`."""
    orderBy: [DownloadsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DownloadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DownloadFilter
  ): [Download!]

  """Reads a set of `Feed`."""
  feeds(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Feed`."""
    orderBy: [FeedsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FeedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FeedFilter
  ): [Feed!]

  """Reads a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): [Item!]

  """Reads a set of `Submission`."""
  submissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Submission`."""
    orderBy: [SubmissionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubmissionFilter
  ): [Submission!]
  download(id: UUID!): Download
  feed(id: UUID!): Feed
  feedByUrl(url: String!): Feed
  item(id: UUID!): Item
  submission(id: Int!): Submission
  enc(hash16: String): String
  smallHash(hash16: String): String
  stringNchars(
    arg0: String
    arg1: Int

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter
  ): [String]
  submissionsStatistics: SubmissionsStatistic
  tinyHash(hash16: String): String
  uuidTimestamp(id: UUID!): Datetime
  ping: String!
}

type Download {
  id: UUID!
  feedId: UUID!
  blob: String!
  content: JSON!
  createdAt: Datetime

  """Reads a single `Feed` that is related to this `Download`."""
  feed: Feed
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Feed {
  id: UUID!
  name: String!
  url: String!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `Download`."""
  downloads(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Download`."""
    orderBy: [DownloadsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DownloadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DownloadFilter
  ): [Download!]!

  """Reads and enables pagination through a set of `Item`."""
  items(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ItemFilter
  ): [Item!]!
}

"""Methods to use when ordering `Download`."""
enum DownloadsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FEED_ID_ASC
  FEED_ID_DESC
  BLOB_ASC
  BLOB_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Download` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DownloadCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `feedId` field."""
  feedId: UUID

  """Checks for equality with the object’s `blob` field."""
  blob: String

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Download` object types. All fields are combined with a logical ‘and.’
"""
input DownloadFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `feedId` field."""
  feedId: UUIDFilter

  """Filter by the object’s `blob` field."""
  blob: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [DownloadFilter!]

  """Checks for any expressions in this list."""
  or: [DownloadFilter!]

  """Negates the expression."""
  not: DownloadFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

type Item {
  id: UUID!
  feedId: UUID!
  title: String!
  link: String!
  date: Datetime!
  summary: String!
  content: String
  author: String
  createdAt: Datetime
  updatedAt: Datetime

  """Reads a single `Feed` that is related to this `Item`."""
  feed: Feed
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FEED_ID_ASC
  FEED_ID_DESC
  TITLE_ASC
  TITLE_DESC
  LINK_ASC
  LINK_DESC
  DATE_ASC
  DATE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  CONTENT_ASC
  CONTENT_DESC
  AUTHOR_ASC
  AUTHOR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `feedId` field."""
  feedId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `link` field."""
  link: String

  """Checks for equality with the object’s `date` field."""
  date: Datetime

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `author` field."""
  author: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Item` object types. All fields are combined with a logical ‘and.’
"""
input ItemFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `feedId` field."""
  feedId: UUIDFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `link` field."""
  link: StringFilter

  """Filter by the object’s `date` field."""
  date: DatetimeFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `author` field."""
  author: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ItemFilter!]

  """Checks for any expressions in this list."""
  or: [ItemFilter!]

  """Negates the expression."""
  not: ItemFilter
}

"""Methods to use when ordering `Feed`."""
enum FeedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  URL_ASC
  URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Feed` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FeedCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A filter to be used against `Feed` object types. All fields are combined with a logical ‘and.’
"""
input FeedFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `url` field."""
  url: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [FeedFilter!]

  """Checks for any expressions in this list."""
  or: [FeedFilter!]

  """Negates the expression."""
  not: FeedFilter
}

"""A person's submission to the survey"""
type Submission {
  """An unique incremental ID"""
  id: Int!

  """The person full name"""
  name: String!

  """The person unverified email address"""
  emailAddress: String!

  """The person age"""
  age: Int

  """The person gender"""
  gender: String

  """The country of origin"""
  country: String

  """A rating from 1 to 5"""
  experienceRating: Int

  """A short opinion"""
  suggestedImprovements: String

  """The URL of the referring page"""
  referrer: String

  """The date/time of the submission"""
  createdAt: Date!
}

"""The day, does not include a time."""
scalar Date

"""Methods to use when ordering `Submission`."""
enum SubmissionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  EXPERIENCE_RATING_ASC
  EXPERIENCE_RATING_DESC
  SUGGESTED_IMPROVEMENTS_ASC
  SUGGESTED_IMPROVEMENTS_DESC
  REFERRER_ASC
  REFERRER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Submission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SubmissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `age` field."""
  age: Int

  """Checks for equality with the object’s `gender` field."""
  gender: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `experienceRating` field."""
  experienceRating: Int

  """Checks for equality with the object’s `suggestedImprovements` field."""
  suggestedImprovements: String

  """Checks for equality with the object’s `referrer` field."""
  referrer: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Date
}

"""
A filter to be used against `Submission` object types. All fields are combined with a logical ‘and.’
"""
input SubmissionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `age` field."""
  age: IntFilter

  """Filter by the object’s `gender` field."""
  gender: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `experienceRating` field."""
  experienceRating: IntFilter

  """Filter by the object’s `suggestedImprovements` field."""
  suggestedImprovements: StringFilter

  """Filter by the object’s `referrer` field."""
  referrer: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DateFilter

  """Checks for all expressions in this list."""
  and: [SubmissionFilter!]

  """Checks for any expressions in this list."""
  or: [SubmissionFilter!]

  """Negates the expression."""
  not: SubmissionFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

type SubmissionsStatistic {
  age: [AgeStat]
  country: [CountryStat]
  experienceRating: [ExperienceRatingStat]
  gender: [GenderStat]
  totalSubmissions: Int
}

type AgeStat {
  value: Int
  count: Int
  ratio: Float
}

type CountryStat {
  value: String
  count: Int
  ratio: Float
}

type ExperienceRatingStat {
  value: Int
  count: Int
  ratio: Float
}

type GenderStat {
  value: String
  count: Int
  ratio: Float
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Download`."""
  createDownload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDownloadInput!
  ): CreateDownloadPayload

  """Creates a single `Feed`."""
  createFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFeedInput!
  ): CreateFeedPayload

  """Creates a single `Item`."""
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `Submission`."""
  createSubmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubmissionInput!
  ): CreateSubmissionPayload

  """Updates a single `Download` using a unique key and a patch."""
  updateDownload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDownloadInput!
  ): UpdateDownloadPayload

  """Updates a single `Feed` using a unique key and a patch."""
  updateFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedInput!
  ): UpdateFeedPayload

  """Updates a single `Feed` using a unique key and a patch."""
  updateFeedByUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFeedByUrlInput!
  ): UpdateFeedPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Submission` using a unique key and a patch."""
  updateSubmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubmissionInput!
  ): UpdateSubmissionPayload

  """Deletes a single `Download` using a unique key."""
  deleteDownload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDownloadInput!
  ): DeleteDownloadPayload

  """Deletes a single `Feed` using a unique key."""
  deleteFeed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedInput!
  ): DeleteFeedPayload

  """Deletes a single `Feed` using a unique key."""
  deleteFeedByUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFeedByUrlInput!
  ): DeleteFeedPayload

  """Deletes a single `Item` using a unique key."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Submission` using a unique key."""
  deleteSubmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubmissionInput!
  ): DeleteSubmissionPayload
  compressedMd5(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CompressedMd5Input!
  ): CompressedMd5Payload
  importItems(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportItemsInput!
  ): ImportItemsPayload
  pong: String!
  importFeed(url: String!): Feed!
}

"""The output of our create `Download` mutation."""
type CreateDownloadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Download` that was created by this mutation."""
  download: Download

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Download`."""
  feed: Feed
}

"""All input for the create `Download` mutation."""
input CreateDownloadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Download` to be created by this mutation."""
  download: DownloadInput!
}

"""An input for mutations affecting `Download`"""
input DownloadInput {
  id: UUID
  feedId: UUID!
  blob: String!
  content: JSON!
  createdAt: Datetime
}

"""The output of our create `Feed` mutation."""
type CreateFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was created by this mutation."""
  feed: Feed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Feed` mutation."""
input CreateFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Feed` to be created by this mutation."""
  feed: FeedInput!
}

"""An input for mutations affecting `Feed`"""
input FeedInput {
  id: UUID
  name: String!
  url: String!
  createdAt: Datetime
}

"""The output of our create `Item` mutation."""
type CreateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was created by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Item`."""
  feed: Feed
}

"""All input for the create `Item` mutation."""
input CreateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Item` to be created by this mutation."""
  item: ItemInput!
}

"""An input for mutations affecting `Item`"""
input ItemInput {
  id: UUID
  feedId: UUID!
  title: String!
  link: String!
  date: Datetime!
  summary: String!
  content: String
  author: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `Submission` mutation."""
type CreateSubmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Submission` that was created by this mutation."""
  submission: Submission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Submission` mutation."""
input CreateSubmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Submission` to be created by this mutation."""
  submission: SubmissionInput!
}

"""An input for mutations affecting `Submission`"""
input SubmissionInput {
  """An unique incremental ID"""
  id: Int

  """The person full name"""
  name: String!

  """The person unverified email address"""
  emailAddress: String!

  """The person age"""
  age: Int

  """The person gender"""
  gender: String

  """The country of origin"""
  country: String

  """A rating from 1 to 5"""
  experienceRating: Int

  """A short opinion"""
  suggestedImprovements: String

  """The URL of the referring page"""
  referrer: String

  """The date/time of the submission"""
  createdAt: Date
}

"""The output of our update `Download` mutation."""
type UpdateDownloadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Download` that was updated by this mutation."""
  download: Download

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Download`."""
  feed: Feed
}

"""All input for the `updateDownload` mutation."""
input UpdateDownloadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Download` being updated.
  """
  patch: DownloadPatch!
  id: UUID!
}

"""
Represents an update to a `Download`. Fields that are set will be updated.
"""
input DownloadPatch {
  id: UUID
  feedId: UUID
  blob: String
  content: JSON
  createdAt: Datetime
}

"""The output of our update `Feed` mutation."""
type UpdateFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was updated by this mutation."""
  feed: Feed

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFeed` mutation."""
input UpdateFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Feed` being updated.
  """
  patch: FeedPatch!
  id: UUID!
}

"""Represents an update to a `Feed`. Fields that are set will be updated."""
input FeedPatch {
  id: UUID
  name: String
  url: String
  createdAt: Datetime
}

"""All input for the `updateFeedByUrl` mutation."""
input UpdateFeedByUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Feed` being updated.
  """
  patch: FeedPatch!
  url: String!
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Item`."""
  feed: Feed
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  patch: ItemPatch!
  id: UUID!
}

"""Represents an update to a `Item`. Fields that are set will be updated."""
input ItemPatch {
  id: UUID
  feedId: UUID
  title: String
  link: String
  date: Datetime
  summary: String
  content: String
  author: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our update `Submission` mutation."""
type UpdateSubmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Submission` that was updated by this mutation."""
  submission: Submission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSubmission` mutation."""
input UpdateSubmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Submission` being updated.
  """
  patch: SubmissionPatch!

  """An unique incremental ID"""
  id: Int!
}

"""
Represents an update to a `Submission`. Fields that are set will be updated.
"""
input SubmissionPatch {
  """An unique incremental ID"""
  id: Int

  """The person full name"""
  name: String

  """The person unverified email address"""
  emailAddress: String

  """The person age"""
  age: Int

  """The person gender"""
  gender: String

  """The country of origin"""
  country: String

  """A rating from 1 to 5"""
  experienceRating: Int

  """A short opinion"""
  suggestedImprovements: String

  """The URL of the referring page"""
  referrer: String

  """The date/time of the submission"""
  createdAt: Date
}

"""The output of our delete `Download` mutation."""
type DeleteDownloadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Download` that was deleted by this mutation."""
  download: Download
  deletedDownloadNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Download`."""
  feed: Feed
}

"""All input for the `deleteDownload` mutation."""
input DeleteDownloadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Feed` mutation."""
type DeleteFeedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Feed` that was deleted by this mutation."""
  feed: Feed
  deletedFeedNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFeed` mutation."""
input DeleteFeedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteFeedByUrl` mutation."""
input DeleteFeedByUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  url: String!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was deleted by this mutation."""
  item: Item
  deletedItemNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Item`."""
  feed: Feed
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Submission` mutation."""
type DeleteSubmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Submission` that was deleted by this mutation."""
  submission: Submission
  deletedSubmissionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSubmission` mutation."""
input DeleteSubmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """An unique incremental ID"""
  id: Int!
}

"""The output of our `compressedMd5` mutation."""
type CompressedMd5Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  string: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `compressedMd5` mutation."""
input CompressedMd5Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  varHash: String
}

"""The output of our `importItems` mutation."""
type ImportItemsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Feed` that is related to this `Item`."""
  feed: Feed
}

"""All input for the `importItems` mutation."""
input ImportItemsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  downloadId: UUID
}
