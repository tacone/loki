"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Statistic`."""
  statistics(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Statistic`."""
    orderBy: [StatisticsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatisticCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StatisticFilter
  ): [Statistic!]

  """Reads a set of `Submission`."""
  submissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Submission`."""
    orderBy: [SubmissionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubmissionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubmissionFilter
  ): [Submission!]
  submission(id: Int!): Submission

  """Reads a single `Submission` using its globally unique `ID`."""
  submissionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Submission`.
    """
    nodeId: ID!
  ): Submission
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Statistic {
  age: [AgeStat]
  country: [CountryStat]
  experienceRating: [ExperienceRatingStat]
  gender: [GenderStat]
  totalSubmissions: Int
}

type AgeStat {
  name: Int
  count: Int
  percentage: Float
}

type CountryStat {
  name: String
  count: Int
  percentage: Float
}

type ExperienceRatingStat {
  name: Int
  count: Int
  percentage: Float
}

type GenderStat {
  name: String
  count: Int
  percentage: Float
}

"""Methods to use when ordering `Statistic`."""
enum StatisticsOrderBy {
  NATURAL
  AGE_ASC
  AGE_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  EXPERIENCE_RATING_ASC
  EXPERIENCE_RATING_DESC
  GENDER_ASC
  GENDER_DESC
  TOTAL_SUBMISSIONS_ASC
  TOTAL_SUBMISSIONS_DESC
}

"""
A condition to be used against `Statistic` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatisticCondition {
  """Checks for equality with the object’s `age` field."""
  age: [AgeStatInput]

  """Checks for equality with the object’s `country` field."""
  country: [CountryStatInput]

  """Checks for equality with the object’s `experienceRating` field."""
  experienceRating: [ExperienceRatingStatInput]

  """Checks for equality with the object’s `gender` field."""
  gender: [GenderStatInput]

  """Checks for equality with the object’s `totalSubmissions` field."""
  totalSubmissions: Int
}

"""An input for mutations affecting `AgeStat`"""
input AgeStatInput {
  name: Int
  count: Int
  percentage: Float
}

"""An input for mutations affecting `CountryStat`"""
input CountryStatInput {
  name: String
  count: Int
  percentage: Float
}

"""An input for mutations affecting `ExperienceRatingStat`"""
input ExperienceRatingStatInput {
  name: Int
  count: Int
  percentage: Float
}

"""An input for mutations affecting `GenderStat`"""
input GenderStatInput {
  name: String
  count: Int
  percentage: Float
}

"""
A filter to be used against `Statistic` object types. All fields are combined with a logical ‘and.’
"""
input StatisticFilter {
  """Filter by the object’s `totalSubmissions` field."""
  totalSubmissions: IntFilter

  """Checks for all expressions in this list."""
  and: [StatisticFilter!]

  """Checks for any expressions in this list."""
  or: [StatisticFilter!]

  """Negates the expression."""
  not: StatisticFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A person's submission to the survey"""
type Submission implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """An unique incremental ID"""
  id: Int!

  """The person full name"""
  name: String!

  """The person unverified email address"""
  emailAddress: String!

  """The person age"""
  age: Int

  """The person gender"""
  gender: String

  """The country of origin"""
  country: String

  """A rating from 1 to 5"""
  experienceRating: Int

  """A short opinion"""
  suggestedImprovements: String

  """The URL of the referring page"""
  referrer: String

  """The date/time of the submission"""
  createdAt: Date!
}

"""The day, does not include a time."""
scalar Date

"""Methods to use when ordering `Submission`."""
enum SubmissionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  COUNTRY_ASC
  COUNTRY_DESC
  EXPERIENCE_RATING_ASC
  EXPERIENCE_RATING_DESC
  SUGGESTED_IMPROVEMENTS_ASC
  SUGGESTED_IMPROVEMENTS_DESC
  REFERRER_ASC
  REFERRER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Submission` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SubmissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `age` field."""
  age: Int

  """Checks for equality with the object’s `gender` field."""
  gender: String

  """Checks for equality with the object’s `country` field."""
  country: String

  """Checks for equality with the object’s `experienceRating` field."""
  experienceRating: Int

  """Checks for equality with the object’s `suggestedImprovements` field."""
  suggestedImprovements: String

  """Checks for equality with the object’s `referrer` field."""
  referrer: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Date
}

"""
A filter to be used against `Submission` object types. All fields are combined with a logical ‘and.’
"""
input SubmissionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `age` field."""
  age: IntFilter

  """Filter by the object’s `gender` field."""
  gender: StringFilter

  """Filter by the object’s `country` field."""
  country: StringFilter

  """Filter by the object’s `experienceRating` field."""
  experienceRating: IntFilter

  """Filter by the object’s `suggestedImprovements` field."""
  suggestedImprovements: StringFilter

  """Filter by the object’s `referrer` field."""
  referrer: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DateFilter

  """Checks for all expressions in this list."""
  and: [SubmissionFilter!]

  """Checks for any expressions in this list."""
  or: [SubmissionFilter!]

  """Negates the expression."""
  not: SubmissionFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Submission`."""
  createSubmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSubmissionInput!
  ): CreateSubmissionPayload

  """
  Updates a single `Submission` using its globally unique id and a patch.
  """
  updateSubmissionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubmissionByNodeIdInput!
  ): UpdateSubmissionPayload

  """Updates a single `Submission` using a unique key and a patch."""
  updateSubmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSubmissionInput!
  ): UpdateSubmissionPayload

  """Deletes a single `Submission` using its globally unique id."""
  deleteSubmissionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubmissionByNodeIdInput!
  ): DeleteSubmissionPayload

  """Deletes a single `Submission` using a unique key."""
  deleteSubmission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSubmissionInput!
  ): DeleteSubmissionPayload
}

"""The output of our create `Submission` mutation."""
type CreateSubmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Submission` that was created by this mutation."""
  submission: Submission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Submission` mutation."""
input CreateSubmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Submission` to be created by this mutation."""
  submission: SubmissionInput!
}

"""An input for mutations affecting `Submission`"""
input SubmissionInput {
  """An unique incremental ID"""
  id: Int

  """The person full name"""
  name: String!

  """The person unverified email address"""
  emailAddress: String!

  """The person age"""
  age: Int

  """The person gender"""
  gender: String

  """The country of origin"""
  country: String

  """A rating from 1 to 5"""
  experienceRating: Int

  """A short opinion"""
  suggestedImprovements: String

  """The URL of the referring page"""
  referrer: String

  """The date/time of the submission"""
  createdAt: Date
}

"""The output of our update `Submission` mutation."""
type UpdateSubmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Submission` that was updated by this mutation."""
  submission: Submission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSubmissionByNodeId` mutation."""
input UpdateSubmissionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Submission` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Submission` being updated.
  """
  patch: SubmissionPatch!
}

"""
Represents an update to a `Submission`. Fields that are set will be updated.
"""
input SubmissionPatch {
  """An unique incremental ID"""
  id: Int

  """The person full name"""
  name: String

  """The person unverified email address"""
  emailAddress: String

  """The person age"""
  age: Int

  """The person gender"""
  gender: String

  """The country of origin"""
  country: String

  """A rating from 1 to 5"""
  experienceRating: Int

  """A short opinion"""
  suggestedImprovements: String

  """The URL of the referring page"""
  referrer: String

  """The date/time of the submission"""
  createdAt: Date
}

"""All input for the `updateSubmission` mutation."""
input UpdateSubmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Submission` being updated.
  """
  patch: SubmissionPatch!

  """An unique incremental ID"""
  id: Int!
}

"""The output of our delete `Submission` mutation."""
type DeleteSubmissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Submission` that was deleted by this mutation."""
  submission: Submission
  deletedSubmissionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSubmissionByNodeId` mutation."""
input DeleteSubmissionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Submission` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSubmission` mutation."""
input DeleteSubmissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """An unique incremental ID"""
  id: Int!
}
